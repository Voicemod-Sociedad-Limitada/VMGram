import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

apply plugin: 'com.android.library'

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"

    //VOICEMOD
    implementation project(path: ':VMGramClient')
    implementation project(path: ':VMGramService')
    //END VOICEMOD

    implementation platform('com.google.firebase:firebase-bom:30.1.0')
    // Declare the dependencies for the Remote Config and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-config'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.arthenica:mobile-ffmpeg-audio:4.4.LTS'
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'com.mparticle:android-core:5.53.0'
    //END VOICEMOD

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.firebase:firebase-config:21.5.0'
    implementation 'com.google.firebase:firebase-datatransport:18.1.0'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.4.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:16.1.1'
    implementation 'com.android.billingclient:billing:5.1.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'com.google.guava:guava:31.1-android'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

def isWindows = String.valueOf(DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS)
android {
    compileSdkVersion 33
    buildToolsVersion '33.0.0'
    ndkVersion "21.4.7075529"
    namespace 'org.telegram.messenger'

    buildFeatures.prefab = true

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    dexOptions {
        jumboMode = true
    }

    //VOICEMOD
    packagingOptions {
        exclude "**/libc++_shared.so"
        exclude "**/libVMGramAidl.so"
        exclude "**/libVMGramClient.so"
    }
    //END VOICEMOD

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled true
    }

    defaultConfig {
        minSdkVersion 30
        targetSdkVersion 33
        versionName "8.9.0"

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        externalNativeBuild {
            cmake {
                //VOICEMOD
                version '3.18.1'
                arguments '-DANDROID_STL=c++_shared', '-DANDROID_PLATFORM=android-16', "-j=16"
                if (project.hasProperty('VCMDAbisFilter') && project.properties['VCMDAbisFilter'] != null) {
                    abiFilters (project.properties['VCMDAbisFilter'].split(','))
                }
                //END VOICEMOD
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", 'TUNA_BASE_URL', '""'
            buildConfigField "String", 'OBFUSCATION_XOR_KEY', '""'
            buildConfigField "char[]", 'TUNA_CLIENT_ID', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'VOICEMOD_USDK_LICENSE_KEY', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'MPARTICLE_API_KEY', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'MPARTICLE_SECRET', '{ 0x00, 0x00, 0x00, 0x00 }'

            debuggable true
            jniDebuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }



        beta {
            buildConfigField "String", 'TUNA_BASE_URL', '""'
            buildConfigField "String", 'OBFUSCATION_XOR_KEY', '""'
            buildConfigField "char[]", 'TUNA_CLIENT_ID', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'VOICEMOD_USDK_LICENSE_KEY', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'MPARTICLE_API_KEY', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'MPARTICLE_SECRET', '{ 0x00, 0x00, 0x00, 0x00 }'

            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        HA_private {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_PRIVATE") + "\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        HA_public {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_PUBLIC") + "\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        standalone {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        release {
            buildConfigField "String", 'TUNA_BASE_URL', '""'
            buildConfigField "char[]", 'TUNA_CLIENT_ID', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'VOICEMOD_USDK_LICENSE_KEY', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "String", 'OBFUSCATION_XOR_KEY', '""'
            buildConfigField "char[]", 'MPARTICLE_API_KEY', '{ 0x00, 0x00, 0x00, 0x00 }'
            buildConfigField "char[]", 'MPARTICLE_SECRET', '{ 0x00, 0x00, 0x00, 0x00 }'

            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
    }
}

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
