plugins {
    id 'com.android.library'
}

String rootDirName = project.rootDir.name
if (rootDirName.startsWith('voicemod-telegram-android')) {
    repositories {
        mavenCentral()
        google()
    }
}

android {

    namespace 'net.voicemod.vmgramservice.aidl'
    compileSdk 33
    ndkVersion '25.2.9519653'

    defaultConfig {
        minSdk 30
        targetSdk 33
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_shared', '-DANDROID_TOOLCHAIN=clang'
                if (project.hasProperty('VCMDAbisFilter') && project.properties['VCMDAbisFilter'] != null) {
                    abiFilters(project.properties['VCMDAbisFilter'].split(','))
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        if (rootDirName.startsWith('voicemod-telegram-android')) {
            beta {
                minifyEnabled false
            }
            HA {
                minifyEnabled true
            }
            standalone {
                minifyEnabled true
            }
            release {
                minifyEnabled true
            }
        }
    }

    buildFeatures {
        aidl true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version "3.22.1"
        }
    }

    buildFeatures.prefabPublishing = true
    prefab {
        VMGramAidl {
            headers "src/main/cpp/include"
        }
    }

    if (rootDirName.startsWith('voicemod-telegram-android')) {
        packagingOptions {
            exclude "**/libc++_shared.so"
        }
    }
}

dependencies {

    implementation 'androidx.annotation:annotation:1.6.0'

    // TODO: Temporal fix
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }

}

/*

Every time you have to modify the AIDL, proceed as follows:

- Search in the code for the string "//WARNING: MAINTAIN THE INLINE DECLARATION".
  And look where it is being used. These comments will be removed from the automatically generated
  code for the AIDL.

- Modify the file: settings.gradle to keep only the include ':VMGramAidl'.
- Synchronize, Compile.
- Change the file ./src/main/aidl/net/voicemod/vmgramservice/VMGramAidl.aidl adding/removing/modi-
  fying the necessary methods.
- Uncomment the code below this comment.
- Synchronize, Compile.
- Recomment the code generation code from the AIDL.

The previous action will have caused the files to be regenerated:
src/main/cpp/include/aidl/net/voicemod/vmgramservice/BnVMGramAidl.h
src/main/cpp/include/aidl/net/voicemod/vmgramservice/BpVMGramAidl.h
src/main/cpp/include/aidl/net/voicemod/vmgramservice/VMGramAidl.h
VMGramAidl/src/main/cpp/net/voicemod/vmgramservice/VMGramAidl.cpp

But with the code generated by the aidl command, later there are linking problems in the rest of the
modules that reference VMGramAidl. It says that certain deconstructors or constructors are not defi-
ned, when they really are.
So it is necessary to modify the ".h" files defining inline constructors and destructors.
In the ".cpp" file the definition must be commented.
The points where this change should be made are labeled with the comment.
//WARNING: MAINTAIN THE INLINE DECLARATION
Please bring back the inline constructors and destructors and include the comment tag.

*/

//task compileAidlNdk {
//    doLast {
//        def aidl = [android.sdkDirectory, 'build-tools', android.buildToolsVersion, 'aidl'].join(File.separator)
//        def outDir = [projectDir.absolutePath, 'src/main/cpp/'].join(File.separator)
//        def headerOutDir = [projectDir.absolutePath, 'src/main/cpp/include'].join(File.separator)
//        def searchPathForImports = [projectDir.absolutePath, 'src/main/aidl'].join(File.separator)
//        def aidlFile = [projectDir.absolutePath, 'src/main/aidl/net/voicemod/vmgramservice/VMGramAidl.aidl'].join(File.separator)
//        exec {
//            executable(aidl)
//            args('--lang=ndk', '-o', outDir, '-h', headerOutDir, '-I', searchPathForImports, aidlFile)
//        }
//    }
//}

//afterEvaluate {
//    preBuild.dependsOn(compileAidlNdk)
//}
